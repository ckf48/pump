<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pump.mapper.PredictFlowMapper">
  <resultMap id="BaseResultMap" type="com.example.pump.model.PredictFlow">
    <result column="pumpNo" jdbcType="INTEGER" property="pumpno" />
    <result column="time" jdbcType="VARCHAR" property="time" />
    <result column="flow" jdbcType="DOUBLE" property="flow" />
    <result column="predict" jdbcType="DOUBLE" property="predict" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    pumpNo, `time`, flow, predict
  </sql>
  <select id="selectByExample" parameterType="com.example.pump.model.PredictFlowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from predict_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.pump.model.PredictFlowExample">
    delete from predict_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.pump.model.PredictFlow">
    insert into predict_flow (pumpNo, `time`, flow, 
      predict)
    values (#{pumpno,jdbcType=INTEGER}, #{time,jdbcType=VARCHAR}, #{flow,jdbcType=DOUBLE}, 
      #{predict,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.example.pump.model.PredictFlow">
    insert into predict_flow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pumpno != null">
        pumpNo,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="flow != null">
        flow,
      </if>
      <if test="predict != null">
        predict,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pumpno != null">
        #{pumpno,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="flow != null">
        #{flow,jdbcType=DOUBLE},
      </if>
      <if test="predict != null">
        #{predict,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.pump.model.PredictFlowExample" resultType="java.lang.Long">
    select count(*) from predict_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update predict_flow
    <set>
      <if test="record.pumpno != null">
        pumpNo = #{record.pumpno,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=VARCHAR},
      </if>
      <if test="record.flow != null">
        flow = #{record.flow,jdbcType=DOUBLE},
      </if>
      <if test="record.predict != null">
        predict = #{record.predict,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update predict_flow
    set pumpNo = #{record.pumpno,jdbcType=INTEGER},
      `time` = #{record.time,jdbcType=VARCHAR},
      flow = #{record.flow,jdbcType=DOUBLE},
      predict = #{record.predict,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>